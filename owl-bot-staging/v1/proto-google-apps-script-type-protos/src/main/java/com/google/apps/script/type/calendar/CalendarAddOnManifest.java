// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/script/type/calendar/calendar_addon_manifest.proto

package com.google.apps.script.type.calendar;

/**
 * <pre>
 * Calendar add-on manifest.
 * </pre>
 *
 * Protobuf type {@code google.apps.script.type.calendar.CalendarAddOnManifest}
 */
public final class CalendarAddOnManifest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.apps.script.type.calendar.CalendarAddOnManifest)
    CalendarAddOnManifestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CalendarAddOnManifest.newBuilder() to construct.
  private CalendarAddOnManifest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CalendarAddOnManifest() {
    conferenceSolution_ = java.util.Collections.emptyList();
    createSettingsUrlFunction_ = "";
    currentEventAccess_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CalendarAddOnManifest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CalendarAddOnManifest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              conferenceSolution_ = new java.util.ArrayList<com.google.apps.script.type.calendar.ConferenceSolution>();
              mutable_bitField0_ |= 0x00000001;
            }
            conferenceSolution_.add(
                input.readMessage(com.google.apps.script.type.calendar.ConferenceSolution.parser(), extensionRegistry));
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            createSettingsUrlFunction_ = s;
            break;
          }
          case 50: {
            com.google.apps.script.type.HomepageExtensionPoint.Builder subBuilder = null;
            if (homepageTrigger_ != null) {
              subBuilder = homepageTrigger_.toBuilder();
            }
            homepageTrigger_ = input.readMessage(com.google.apps.script.type.HomepageExtensionPoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(homepageTrigger_);
              homepageTrigger_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder subBuilder = null;
            if (eventOpenTrigger_ != null) {
              subBuilder = eventOpenTrigger_.toBuilder();
            }
            eventOpenTrigger_ = input.readMessage(com.google.apps.script.type.calendar.CalendarExtensionPoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(eventOpenTrigger_);
              eventOpenTrigger_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder subBuilder = null;
            if (eventUpdateTrigger_ != null) {
              subBuilder = eventUpdateTrigger_.toBuilder();
            }
            eventUpdateTrigger_ = input.readMessage(com.google.apps.script.type.calendar.CalendarExtensionPoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(eventUpdateTrigger_);
              eventUpdateTrigger_ = subBuilder.buildPartial();
            }

            break;
          }
          case 96: {
            int rawValue = input.readEnum();

            currentEventAccess_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        conferenceSolution_ = java.util.Collections.unmodifiableList(conferenceSolution_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.apps.script.type.calendar.CalendarAddOnManifestProto.internal_static_google_apps_script_type_calendar_CalendarAddOnManifest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.apps.script.type.calendar.CalendarAddOnManifestProto.internal_static_google_apps_script_type_calendar_CalendarAddOnManifest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.apps.script.type.calendar.CalendarAddOnManifest.class, com.google.apps.script.type.calendar.CalendarAddOnManifest.Builder.class);
  }

  /**
   * <pre>
   * An enum defining the level of data access event triggers require.
   * </pre>
   *
   * Protobuf enum {@code google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess}
   */
  public enum EventAccess
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default value when nothing is set for EventAccess.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * METADATA gives event triggers the permission to access the metadata of
     * events such as event id and calendar id.
     * </pre>
     *
     * <code>METADATA = 1;</code>
     */
    METADATA(1),
    /**
     * <pre>
     * READ gives event triggers access to all provided event fields including
     * the metadata, attendees, and conference data.
     * </pre>
     *
     * <code>READ = 3;</code>
     */
    READ(3),
    /**
     * <pre>
     * WRITE gives event triggers access to the metadata of events and the
     * ability to perform all actions, including adding attendees and setting
     * conference data.
     * </pre>
     *
     * <code>WRITE = 4;</code>
     */
    WRITE(4),
    /**
     * <pre>
     * READ_WRITE gives event triggers access to all provided event fields
     * including the metadata, attendees, and conference data and the ability to
     * perform all actions.
     * </pre>
     *
     * <code>READ_WRITE = 5;</code>
     */
    READ_WRITE(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Default value when nothing is set for EventAccess.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * METADATA gives event triggers the permission to access the metadata of
     * events such as event id and calendar id.
     * </pre>
     *
     * <code>METADATA = 1;</code>
     */
    public static final int METADATA_VALUE = 1;
    /**
     * <pre>
     * READ gives event triggers access to all provided event fields including
     * the metadata, attendees, and conference data.
     * </pre>
     *
     * <code>READ = 3;</code>
     */
    public static final int READ_VALUE = 3;
    /**
     * <pre>
     * WRITE gives event triggers access to the metadata of events and the
     * ability to perform all actions, including adding attendees and setting
     * conference data.
     * </pre>
     *
     * <code>WRITE = 4;</code>
     */
    public static final int WRITE_VALUE = 4;
    /**
     * <pre>
     * READ_WRITE gives event triggers access to all provided event fields
     * including the metadata, attendees, and conference data and the ability to
     * perform all actions.
     * </pre>
     *
     * <code>READ_WRITE = 5;</code>
     */
    public static final int READ_WRITE_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EventAccess valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EventAccess forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return METADATA;
        case 3: return READ;
        case 4: return WRITE;
        case 5: return READ_WRITE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EventAccess>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EventAccess> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventAccess>() {
            public EventAccess findValueByNumber(int number) {
              return EventAccess.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.apps.script.type.calendar.CalendarAddOnManifest.getDescriptor().getEnumTypes().get(0);
    }

    private static final EventAccess[] VALUES = values();

    public static EventAccess valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EventAccess(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess)
  }

  public static final int HOMEPAGE_TRIGGER_FIELD_NUMBER = 6;
  private com.google.apps.script.type.HomepageExtensionPoint homepageTrigger_;
  /**
   * <pre>
   * Defines an endpoint that will be executed contexts that don't
   * match a declared contextual trigger. Any cards generated by this function
   * will always be available to the user, but may be eclipsed by contextual
   * content when this add-on declares more targeted triggers.
   * If present, this overrides the configuration from
   * `addOns.common.homepageTrigger`.
   * </pre>
   *
   * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
   * @return Whether the homepageTrigger field is set.
   */
  @java.lang.Override
  public boolean hasHomepageTrigger() {
    return homepageTrigger_ != null;
  }
  /**
   * <pre>
   * Defines an endpoint that will be executed contexts that don't
   * match a declared contextual trigger. Any cards generated by this function
   * will always be available to the user, but may be eclipsed by contextual
   * content when this add-on declares more targeted triggers.
   * If present, this overrides the configuration from
   * `addOns.common.homepageTrigger`.
   * </pre>
   *
   * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
   * @return The homepageTrigger.
   */
  @java.lang.Override
  public com.google.apps.script.type.HomepageExtensionPoint getHomepageTrigger() {
    return homepageTrigger_ == null ? com.google.apps.script.type.HomepageExtensionPoint.getDefaultInstance() : homepageTrigger_;
  }
  /**
   * <pre>
   * Defines an endpoint that will be executed contexts that don't
   * match a declared contextual trigger. Any cards generated by this function
   * will always be available to the user, but may be eclipsed by contextual
   * content when this add-on declares more targeted triggers.
   * If present, this overrides the configuration from
   * `addOns.common.homepageTrigger`.
   * </pre>
   *
   * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
   */
  @java.lang.Override
  public com.google.apps.script.type.HomepageExtensionPointOrBuilder getHomepageTriggerOrBuilder() {
    return getHomepageTrigger();
  }

  public static final int CONFERENCE_SOLUTION_FIELD_NUMBER = 3;
  private java.util.List<com.google.apps.script.type.calendar.ConferenceSolution> conferenceSolution_;
  /**
   * <pre>
   * Defines conference solutions provided by this add-on.
   * </pre>
   *
   * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.apps.script.type.calendar.ConferenceSolution> getConferenceSolutionList() {
    return conferenceSolution_;
  }
  /**
   * <pre>
   * Defines conference solutions provided by this add-on.
   * </pre>
   *
   * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder> 
      getConferenceSolutionOrBuilderList() {
    return conferenceSolution_;
  }
  /**
   * <pre>
   * Defines conference solutions provided by this add-on.
   * </pre>
   *
   * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
   */
  @java.lang.Override
  public int getConferenceSolutionCount() {
    return conferenceSolution_.size();
  }
  /**
   * <pre>
   * Defines conference solutions provided by this add-on.
   * </pre>
   *
   * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
   */
  @java.lang.Override
  public com.google.apps.script.type.calendar.ConferenceSolution getConferenceSolution(int index) {
    return conferenceSolution_.get(index);
  }
  /**
   * <pre>
   * Defines conference solutions provided by this add-on.
   * </pre>
   *
   * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
   */
  @java.lang.Override
  public com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder getConferenceSolutionOrBuilder(
      int index) {
    return conferenceSolution_.get(index);
  }

  public static final int CREATE_SETTINGS_URL_FUNCTION_FIELD_NUMBER = 5;
  private volatile java.lang.Object createSettingsUrlFunction_;
  /**
   * <pre>
   * An endpoint to execute that creates a URL to the add-on's settings page.
   * </pre>
   *
   * <code>string create_settings_url_function = 5;</code>
   * @return The createSettingsUrlFunction.
   */
  @java.lang.Override
  public java.lang.String getCreateSettingsUrlFunction() {
    java.lang.Object ref = createSettingsUrlFunction_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      createSettingsUrlFunction_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * An endpoint to execute that creates a URL to the add-on's settings page.
   * </pre>
   *
   * <code>string create_settings_url_function = 5;</code>
   * @return The bytes for createSettingsUrlFunction.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCreateSettingsUrlFunctionBytes() {
    java.lang.Object ref = createSettingsUrlFunction_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      createSettingsUrlFunction_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EVENT_OPEN_TRIGGER_FIELD_NUMBER = 10;
  private com.google.apps.script.type.calendar.CalendarExtensionPoint eventOpenTrigger_;
  /**
   * <pre>
   * An endpoint to trigger when an event is opened (viewed/edited).
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
   * @return Whether the eventOpenTrigger field is set.
   */
  @java.lang.Override
  public boolean hasEventOpenTrigger() {
    return eventOpenTrigger_ != null;
  }
  /**
   * <pre>
   * An endpoint to trigger when an event is opened (viewed/edited).
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
   * @return The eventOpenTrigger.
   */
  @java.lang.Override
  public com.google.apps.script.type.calendar.CalendarExtensionPoint getEventOpenTrigger() {
    return eventOpenTrigger_ == null ? com.google.apps.script.type.calendar.CalendarExtensionPoint.getDefaultInstance() : eventOpenTrigger_;
  }
  /**
   * <pre>
   * An endpoint to trigger when an event is opened (viewed/edited).
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
   */
  @java.lang.Override
  public com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder getEventOpenTriggerOrBuilder() {
    return getEventOpenTrigger();
  }

  public static final int EVENT_UPDATE_TRIGGER_FIELD_NUMBER = 11;
  private com.google.apps.script.type.calendar.CalendarExtensionPoint eventUpdateTrigger_;
  /**
   * <pre>
   * An endpoint to trigger when the open event is updated.
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
   * @return Whether the eventUpdateTrigger field is set.
   */
  @java.lang.Override
  public boolean hasEventUpdateTrigger() {
    return eventUpdateTrigger_ != null;
  }
  /**
   * <pre>
   * An endpoint to trigger when the open event is updated.
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
   * @return The eventUpdateTrigger.
   */
  @java.lang.Override
  public com.google.apps.script.type.calendar.CalendarExtensionPoint getEventUpdateTrigger() {
    return eventUpdateTrigger_ == null ? com.google.apps.script.type.calendar.CalendarExtensionPoint.getDefaultInstance() : eventUpdateTrigger_;
  }
  /**
   * <pre>
   * An endpoint to trigger when the open event is updated.
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
   */
  @java.lang.Override
  public com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder getEventUpdateTriggerOrBuilder() {
    return getEventUpdateTrigger();
  }

  public static final int CURRENT_EVENT_ACCESS_FIELD_NUMBER = 12;
  private int currentEventAccess_;
  /**
   * <pre>
   * Define the level of data access when an event addon is triggered.
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
   * @return The enum numeric value on the wire for currentEventAccess.
   */
  @java.lang.Override public int getCurrentEventAccessValue() {
    return currentEventAccess_;
  }
  /**
   * <pre>
   * Define the level of data access when an event addon is triggered.
   * </pre>
   *
   * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
   * @return The currentEventAccess.
   */
  @java.lang.Override public com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess getCurrentEventAccess() {
    @SuppressWarnings("deprecation")
    com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess result = com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.valueOf(currentEventAccess_);
    return result == null ? com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < conferenceSolution_.size(); i++) {
      output.writeMessage(3, conferenceSolution_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(createSettingsUrlFunction_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, createSettingsUrlFunction_);
    }
    if (homepageTrigger_ != null) {
      output.writeMessage(6, getHomepageTrigger());
    }
    if (eventOpenTrigger_ != null) {
      output.writeMessage(10, getEventOpenTrigger());
    }
    if (eventUpdateTrigger_ != null) {
      output.writeMessage(11, getEventUpdateTrigger());
    }
    if (currentEventAccess_ != com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.UNSPECIFIED.getNumber()) {
      output.writeEnum(12, currentEventAccess_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < conferenceSolution_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, conferenceSolution_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(createSettingsUrlFunction_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, createSettingsUrlFunction_);
    }
    if (homepageTrigger_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getHomepageTrigger());
    }
    if (eventOpenTrigger_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getEventOpenTrigger());
    }
    if (eventUpdateTrigger_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getEventUpdateTrigger());
    }
    if (currentEventAccess_ != com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(12, currentEventAccess_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.apps.script.type.calendar.CalendarAddOnManifest)) {
      return super.equals(obj);
    }
    com.google.apps.script.type.calendar.CalendarAddOnManifest other = (com.google.apps.script.type.calendar.CalendarAddOnManifest) obj;

    if (hasHomepageTrigger() != other.hasHomepageTrigger()) return false;
    if (hasHomepageTrigger()) {
      if (!getHomepageTrigger()
          .equals(other.getHomepageTrigger())) return false;
    }
    if (!getConferenceSolutionList()
        .equals(other.getConferenceSolutionList())) return false;
    if (!getCreateSettingsUrlFunction()
        .equals(other.getCreateSettingsUrlFunction())) return false;
    if (hasEventOpenTrigger() != other.hasEventOpenTrigger()) return false;
    if (hasEventOpenTrigger()) {
      if (!getEventOpenTrigger()
          .equals(other.getEventOpenTrigger())) return false;
    }
    if (hasEventUpdateTrigger() != other.hasEventUpdateTrigger()) return false;
    if (hasEventUpdateTrigger()) {
      if (!getEventUpdateTrigger()
          .equals(other.getEventUpdateTrigger())) return false;
    }
    if (currentEventAccess_ != other.currentEventAccess_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasHomepageTrigger()) {
      hash = (37 * hash) + HOMEPAGE_TRIGGER_FIELD_NUMBER;
      hash = (53 * hash) + getHomepageTrigger().hashCode();
    }
    if (getConferenceSolutionCount() > 0) {
      hash = (37 * hash) + CONFERENCE_SOLUTION_FIELD_NUMBER;
      hash = (53 * hash) + getConferenceSolutionList().hashCode();
    }
    hash = (37 * hash) + CREATE_SETTINGS_URL_FUNCTION_FIELD_NUMBER;
    hash = (53 * hash) + getCreateSettingsUrlFunction().hashCode();
    if (hasEventOpenTrigger()) {
      hash = (37 * hash) + EVENT_OPEN_TRIGGER_FIELD_NUMBER;
      hash = (53 * hash) + getEventOpenTrigger().hashCode();
    }
    if (hasEventUpdateTrigger()) {
      hash = (37 * hash) + EVENT_UPDATE_TRIGGER_FIELD_NUMBER;
      hash = (53 * hash) + getEventUpdateTrigger().hashCode();
    }
    hash = (37 * hash) + CURRENT_EVENT_ACCESS_FIELD_NUMBER;
    hash = (53 * hash) + currentEventAccess_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.apps.script.type.calendar.CalendarAddOnManifest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.apps.script.type.calendar.CalendarAddOnManifest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Calendar add-on manifest.
   * </pre>
   *
   * Protobuf type {@code google.apps.script.type.calendar.CalendarAddOnManifest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.apps.script.type.calendar.CalendarAddOnManifest)
      com.google.apps.script.type.calendar.CalendarAddOnManifestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.apps.script.type.calendar.CalendarAddOnManifestProto.internal_static_google_apps_script_type_calendar_CalendarAddOnManifest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.apps.script.type.calendar.CalendarAddOnManifestProto.internal_static_google_apps_script_type_calendar_CalendarAddOnManifest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.apps.script.type.calendar.CalendarAddOnManifest.class, com.google.apps.script.type.calendar.CalendarAddOnManifest.Builder.class);
    }

    // Construct using com.google.apps.script.type.calendar.CalendarAddOnManifest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getConferenceSolutionFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (homepageTriggerBuilder_ == null) {
        homepageTrigger_ = null;
      } else {
        homepageTrigger_ = null;
        homepageTriggerBuilder_ = null;
      }
      if (conferenceSolutionBuilder_ == null) {
        conferenceSolution_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        conferenceSolutionBuilder_.clear();
      }
      createSettingsUrlFunction_ = "";

      if (eventOpenTriggerBuilder_ == null) {
        eventOpenTrigger_ = null;
      } else {
        eventOpenTrigger_ = null;
        eventOpenTriggerBuilder_ = null;
      }
      if (eventUpdateTriggerBuilder_ == null) {
        eventUpdateTrigger_ = null;
      } else {
        eventUpdateTrigger_ = null;
        eventUpdateTriggerBuilder_ = null;
      }
      currentEventAccess_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.apps.script.type.calendar.CalendarAddOnManifestProto.internal_static_google_apps_script_type_calendar_CalendarAddOnManifest_descriptor;
    }

    @java.lang.Override
    public com.google.apps.script.type.calendar.CalendarAddOnManifest getDefaultInstanceForType() {
      return com.google.apps.script.type.calendar.CalendarAddOnManifest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.apps.script.type.calendar.CalendarAddOnManifest build() {
      com.google.apps.script.type.calendar.CalendarAddOnManifest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.apps.script.type.calendar.CalendarAddOnManifest buildPartial() {
      com.google.apps.script.type.calendar.CalendarAddOnManifest result = new com.google.apps.script.type.calendar.CalendarAddOnManifest(this);
      int from_bitField0_ = bitField0_;
      if (homepageTriggerBuilder_ == null) {
        result.homepageTrigger_ = homepageTrigger_;
      } else {
        result.homepageTrigger_ = homepageTriggerBuilder_.build();
      }
      if (conferenceSolutionBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          conferenceSolution_ = java.util.Collections.unmodifiableList(conferenceSolution_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.conferenceSolution_ = conferenceSolution_;
      } else {
        result.conferenceSolution_ = conferenceSolutionBuilder_.build();
      }
      result.createSettingsUrlFunction_ = createSettingsUrlFunction_;
      if (eventOpenTriggerBuilder_ == null) {
        result.eventOpenTrigger_ = eventOpenTrigger_;
      } else {
        result.eventOpenTrigger_ = eventOpenTriggerBuilder_.build();
      }
      if (eventUpdateTriggerBuilder_ == null) {
        result.eventUpdateTrigger_ = eventUpdateTrigger_;
      } else {
        result.eventUpdateTrigger_ = eventUpdateTriggerBuilder_.build();
      }
      result.currentEventAccess_ = currentEventAccess_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.apps.script.type.calendar.CalendarAddOnManifest) {
        return mergeFrom((com.google.apps.script.type.calendar.CalendarAddOnManifest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.apps.script.type.calendar.CalendarAddOnManifest other) {
      if (other == com.google.apps.script.type.calendar.CalendarAddOnManifest.getDefaultInstance()) return this;
      if (other.hasHomepageTrigger()) {
        mergeHomepageTrigger(other.getHomepageTrigger());
      }
      if (conferenceSolutionBuilder_ == null) {
        if (!other.conferenceSolution_.isEmpty()) {
          if (conferenceSolution_.isEmpty()) {
            conferenceSolution_ = other.conferenceSolution_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureConferenceSolutionIsMutable();
            conferenceSolution_.addAll(other.conferenceSolution_);
          }
          onChanged();
        }
      } else {
        if (!other.conferenceSolution_.isEmpty()) {
          if (conferenceSolutionBuilder_.isEmpty()) {
            conferenceSolutionBuilder_.dispose();
            conferenceSolutionBuilder_ = null;
            conferenceSolution_ = other.conferenceSolution_;
            bitField0_ = (bitField0_ & ~0x00000001);
            conferenceSolutionBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getConferenceSolutionFieldBuilder() : null;
          } else {
            conferenceSolutionBuilder_.addAllMessages(other.conferenceSolution_);
          }
        }
      }
      if (!other.getCreateSettingsUrlFunction().isEmpty()) {
        createSettingsUrlFunction_ = other.createSettingsUrlFunction_;
        onChanged();
      }
      if (other.hasEventOpenTrigger()) {
        mergeEventOpenTrigger(other.getEventOpenTrigger());
      }
      if (other.hasEventUpdateTrigger()) {
        mergeEventUpdateTrigger(other.getEventUpdateTrigger());
      }
      if (other.currentEventAccess_ != 0) {
        setCurrentEventAccessValue(other.getCurrentEventAccessValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.apps.script.type.calendar.CalendarAddOnManifest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.apps.script.type.calendar.CalendarAddOnManifest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.apps.script.type.HomepageExtensionPoint homepageTrigger_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.apps.script.type.HomepageExtensionPoint, com.google.apps.script.type.HomepageExtensionPoint.Builder, com.google.apps.script.type.HomepageExtensionPointOrBuilder> homepageTriggerBuilder_;
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     * @return Whether the homepageTrigger field is set.
     */
    public boolean hasHomepageTrigger() {
      return homepageTriggerBuilder_ != null || homepageTrigger_ != null;
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     * @return The homepageTrigger.
     */
    public com.google.apps.script.type.HomepageExtensionPoint getHomepageTrigger() {
      if (homepageTriggerBuilder_ == null) {
        return homepageTrigger_ == null ? com.google.apps.script.type.HomepageExtensionPoint.getDefaultInstance() : homepageTrigger_;
      } else {
        return homepageTriggerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    public Builder setHomepageTrigger(com.google.apps.script.type.HomepageExtensionPoint value) {
      if (homepageTriggerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        homepageTrigger_ = value;
        onChanged();
      } else {
        homepageTriggerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    public Builder setHomepageTrigger(
        com.google.apps.script.type.HomepageExtensionPoint.Builder builderForValue) {
      if (homepageTriggerBuilder_ == null) {
        homepageTrigger_ = builderForValue.build();
        onChanged();
      } else {
        homepageTriggerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    public Builder mergeHomepageTrigger(com.google.apps.script.type.HomepageExtensionPoint value) {
      if (homepageTriggerBuilder_ == null) {
        if (homepageTrigger_ != null) {
          homepageTrigger_ =
            com.google.apps.script.type.HomepageExtensionPoint.newBuilder(homepageTrigger_).mergeFrom(value).buildPartial();
        } else {
          homepageTrigger_ = value;
        }
        onChanged();
      } else {
        homepageTriggerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    public Builder clearHomepageTrigger() {
      if (homepageTriggerBuilder_ == null) {
        homepageTrigger_ = null;
        onChanged();
      } else {
        homepageTrigger_ = null;
        homepageTriggerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    public com.google.apps.script.type.HomepageExtensionPoint.Builder getHomepageTriggerBuilder() {
      
      onChanged();
      return getHomepageTriggerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    public com.google.apps.script.type.HomepageExtensionPointOrBuilder getHomepageTriggerOrBuilder() {
      if (homepageTriggerBuilder_ != null) {
        return homepageTriggerBuilder_.getMessageOrBuilder();
      } else {
        return homepageTrigger_ == null ?
            com.google.apps.script.type.HomepageExtensionPoint.getDefaultInstance() : homepageTrigger_;
      }
    }
    /**
     * <pre>
     * Defines an endpoint that will be executed contexts that don't
     * match a declared contextual trigger. Any cards generated by this function
     * will always be available to the user, but may be eclipsed by contextual
     * content when this add-on declares more targeted triggers.
     * If present, this overrides the configuration from
     * `addOns.common.homepageTrigger`.
     * </pre>
     *
     * <code>.google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.apps.script.type.HomepageExtensionPoint, com.google.apps.script.type.HomepageExtensionPoint.Builder, com.google.apps.script.type.HomepageExtensionPointOrBuilder> 
        getHomepageTriggerFieldBuilder() {
      if (homepageTriggerBuilder_ == null) {
        homepageTriggerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.apps.script.type.HomepageExtensionPoint, com.google.apps.script.type.HomepageExtensionPoint.Builder, com.google.apps.script.type.HomepageExtensionPointOrBuilder>(
                getHomepageTrigger(),
                getParentForChildren(),
                isClean());
        homepageTrigger_ = null;
      }
      return homepageTriggerBuilder_;
    }

    private java.util.List<com.google.apps.script.type.calendar.ConferenceSolution> conferenceSolution_ =
      java.util.Collections.emptyList();
    private void ensureConferenceSolutionIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        conferenceSolution_ = new java.util.ArrayList<com.google.apps.script.type.calendar.ConferenceSolution>(conferenceSolution_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.apps.script.type.calendar.ConferenceSolution, com.google.apps.script.type.calendar.ConferenceSolution.Builder, com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder> conferenceSolutionBuilder_;

    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public java.util.List<com.google.apps.script.type.calendar.ConferenceSolution> getConferenceSolutionList() {
      if (conferenceSolutionBuilder_ == null) {
        return java.util.Collections.unmodifiableList(conferenceSolution_);
      } else {
        return conferenceSolutionBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public int getConferenceSolutionCount() {
      if (conferenceSolutionBuilder_ == null) {
        return conferenceSolution_.size();
      } else {
        return conferenceSolutionBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public com.google.apps.script.type.calendar.ConferenceSolution getConferenceSolution(int index) {
      if (conferenceSolutionBuilder_ == null) {
        return conferenceSolution_.get(index);
      } else {
        return conferenceSolutionBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder setConferenceSolution(
        int index, com.google.apps.script.type.calendar.ConferenceSolution value) {
      if (conferenceSolutionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.set(index, value);
        onChanged();
      } else {
        conferenceSolutionBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder setConferenceSolution(
        int index, com.google.apps.script.type.calendar.ConferenceSolution.Builder builderForValue) {
      if (conferenceSolutionBuilder_ == null) {
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.set(index, builderForValue.build());
        onChanged();
      } else {
        conferenceSolutionBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder addConferenceSolution(com.google.apps.script.type.calendar.ConferenceSolution value) {
      if (conferenceSolutionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.add(value);
        onChanged();
      } else {
        conferenceSolutionBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder addConferenceSolution(
        int index, com.google.apps.script.type.calendar.ConferenceSolution value) {
      if (conferenceSolutionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.add(index, value);
        onChanged();
      } else {
        conferenceSolutionBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder addConferenceSolution(
        com.google.apps.script.type.calendar.ConferenceSolution.Builder builderForValue) {
      if (conferenceSolutionBuilder_ == null) {
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.add(builderForValue.build());
        onChanged();
      } else {
        conferenceSolutionBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder addConferenceSolution(
        int index, com.google.apps.script.type.calendar.ConferenceSolution.Builder builderForValue) {
      if (conferenceSolutionBuilder_ == null) {
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.add(index, builderForValue.build());
        onChanged();
      } else {
        conferenceSolutionBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder addAllConferenceSolution(
        java.lang.Iterable<? extends com.google.apps.script.type.calendar.ConferenceSolution> values) {
      if (conferenceSolutionBuilder_ == null) {
        ensureConferenceSolutionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, conferenceSolution_);
        onChanged();
      } else {
        conferenceSolutionBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder clearConferenceSolution() {
      if (conferenceSolutionBuilder_ == null) {
        conferenceSolution_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        conferenceSolutionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public Builder removeConferenceSolution(int index) {
      if (conferenceSolutionBuilder_ == null) {
        ensureConferenceSolutionIsMutable();
        conferenceSolution_.remove(index);
        onChanged();
      } else {
        conferenceSolutionBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public com.google.apps.script.type.calendar.ConferenceSolution.Builder getConferenceSolutionBuilder(
        int index) {
      return getConferenceSolutionFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder getConferenceSolutionOrBuilder(
        int index) {
      if (conferenceSolutionBuilder_ == null) {
        return conferenceSolution_.get(index);  } else {
        return conferenceSolutionBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public java.util.List<? extends com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder> 
         getConferenceSolutionOrBuilderList() {
      if (conferenceSolutionBuilder_ != null) {
        return conferenceSolutionBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(conferenceSolution_);
      }
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public com.google.apps.script.type.calendar.ConferenceSolution.Builder addConferenceSolutionBuilder() {
      return getConferenceSolutionFieldBuilder().addBuilder(
          com.google.apps.script.type.calendar.ConferenceSolution.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public com.google.apps.script.type.calendar.ConferenceSolution.Builder addConferenceSolutionBuilder(
        int index) {
      return getConferenceSolutionFieldBuilder().addBuilder(
          index, com.google.apps.script.type.calendar.ConferenceSolution.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines conference solutions provided by this add-on.
     * </pre>
     *
     * <code>repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;</code>
     */
    public java.util.List<com.google.apps.script.type.calendar.ConferenceSolution.Builder> 
         getConferenceSolutionBuilderList() {
      return getConferenceSolutionFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.apps.script.type.calendar.ConferenceSolution, com.google.apps.script.type.calendar.ConferenceSolution.Builder, com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder> 
        getConferenceSolutionFieldBuilder() {
      if (conferenceSolutionBuilder_ == null) {
        conferenceSolutionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.apps.script.type.calendar.ConferenceSolution, com.google.apps.script.type.calendar.ConferenceSolution.Builder, com.google.apps.script.type.calendar.ConferenceSolutionOrBuilder>(
                conferenceSolution_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        conferenceSolution_ = null;
      }
      return conferenceSolutionBuilder_;
    }

    private java.lang.Object createSettingsUrlFunction_ = "";
    /**
     * <pre>
     * An endpoint to execute that creates a URL to the add-on's settings page.
     * </pre>
     *
     * <code>string create_settings_url_function = 5;</code>
     * @return The createSettingsUrlFunction.
     */
    public java.lang.String getCreateSettingsUrlFunction() {
      java.lang.Object ref = createSettingsUrlFunction_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        createSettingsUrlFunction_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * An endpoint to execute that creates a URL to the add-on's settings page.
     * </pre>
     *
     * <code>string create_settings_url_function = 5;</code>
     * @return The bytes for createSettingsUrlFunction.
     */
    public com.google.protobuf.ByteString
        getCreateSettingsUrlFunctionBytes() {
      java.lang.Object ref = createSettingsUrlFunction_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        createSettingsUrlFunction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * An endpoint to execute that creates a URL to the add-on's settings page.
     * </pre>
     *
     * <code>string create_settings_url_function = 5;</code>
     * @param value The createSettingsUrlFunction to set.
     * @return This builder for chaining.
     */
    public Builder setCreateSettingsUrlFunction(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      createSettingsUrlFunction_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An endpoint to execute that creates a URL to the add-on's settings page.
     * </pre>
     *
     * <code>string create_settings_url_function = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearCreateSettingsUrlFunction() {
      
      createSettingsUrlFunction_ = getDefaultInstance().getCreateSettingsUrlFunction();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An endpoint to execute that creates a URL to the add-on's settings page.
     * </pre>
     *
     * <code>string create_settings_url_function = 5;</code>
     * @param value The bytes for createSettingsUrlFunction to set.
     * @return This builder for chaining.
     */
    public Builder setCreateSettingsUrlFunctionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      createSettingsUrlFunction_ = value;
      onChanged();
      return this;
    }

    private com.google.apps.script.type.calendar.CalendarExtensionPoint eventOpenTrigger_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.apps.script.type.calendar.CalendarExtensionPoint, com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder, com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder> eventOpenTriggerBuilder_;
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     * @return Whether the eventOpenTrigger field is set.
     */
    public boolean hasEventOpenTrigger() {
      return eventOpenTriggerBuilder_ != null || eventOpenTrigger_ != null;
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     * @return The eventOpenTrigger.
     */
    public com.google.apps.script.type.calendar.CalendarExtensionPoint getEventOpenTrigger() {
      if (eventOpenTriggerBuilder_ == null) {
        return eventOpenTrigger_ == null ? com.google.apps.script.type.calendar.CalendarExtensionPoint.getDefaultInstance() : eventOpenTrigger_;
      } else {
        return eventOpenTriggerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    public Builder setEventOpenTrigger(com.google.apps.script.type.calendar.CalendarExtensionPoint value) {
      if (eventOpenTriggerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        eventOpenTrigger_ = value;
        onChanged();
      } else {
        eventOpenTriggerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    public Builder setEventOpenTrigger(
        com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder builderForValue) {
      if (eventOpenTriggerBuilder_ == null) {
        eventOpenTrigger_ = builderForValue.build();
        onChanged();
      } else {
        eventOpenTriggerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    public Builder mergeEventOpenTrigger(com.google.apps.script.type.calendar.CalendarExtensionPoint value) {
      if (eventOpenTriggerBuilder_ == null) {
        if (eventOpenTrigger_ != null) {
          eventOpenTrigger_ =
            com.google.apps.script.type.calendar.CalendarExtensionPoint.newBuilder(eventOpenTrigger_).mergeFrom(value).buildPartial();
        } else {
          eventOpenTrigger_ = value;
        }
        onChanged();
      } else {
        eventOpenTriggerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    public Builder clearEventOpenTrigger() {
      if (eventOpenTriggerBuilder_ == null) {
        eventOpenTrigger_ = null;
        onChanged();
      } else {
        eventOpenTrigger_ = null;
        eventOpenTriggerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    public com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder getEventOpenTriggerBuilder() {
      
      onChanged();
      return getEventOpenTriggerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    public com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder getEventOpenTriggerOrBuilder() {
      if (eventOpenTriggerBuilder_ != null) {
        return eventOpenTriggerBuilder_.getMessageOrBuilder();
      } else {
        return eventOpenTrigger_ == null ?
            com.google.apps.script.type.calendar.CalendarExtensionPoint.getDefaultInstance() : eventOpenTrigger_;
      }
    }
    /**
     * <pre>
     * An endpoint to trigger when an event is opened (viewed/edited).
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.apps.script.type.calendar.CalendarExtensionPoint, com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder, com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder> 
        getEventOpenTriggerFieldBuilder() {
      if (eventOpenTriggerBuilder_ == null) {
        eventOpenTriggerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.apps.script.type.calendar.CalendarExtensionPoint, com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder, com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder>(
                getEventOpenTrigger(),
                getParentForChildren(),
                isClean());
        eventOpenTrigger_ = null;
      }
      return eventOpenTriggerBuilder_;
    }

    private com.google.apps.script.type.calendar.CalendarExtensionPoint eventUpdateTrigger_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.apps.script.type.calendar.CalendarExtensionPoint, com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder, com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder> eventUpdateTriggerBuilder_;
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     * @return Whether the eventUpdateTrigger field is set.
     */
    public boolean hasEventUpdateTrigger() {
      return eventUpdateTriggerBuilder_ != null || eventUpdateTrigger_ != null;
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     * @return The eventUpdateTrigger.
     */
    public com.google.apps.script.type.calendar.CalendarExtensionPoint getEventUpdateTrigger() {
      if (eventUpdateTriggerBuilder_ == null) {
        return eventUpdateTrigger_ == null ? com.google.apps.script.type.calendar.CalendarExtensionPoint.getDefaultInstance() : eventUpdateTrigger_;
      } else {
        return eventUpdateTriggerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    public Builder setEventUpdateTrigger(com.google.apps.script.type.calendar.CalendarExtensionPoint value) {
      if (eventUpdateTriggerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        eventUpdateTrigger_ = value;
        onChanged();
      } else {
        eventUpdateTriggerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    public Builder setEventUpdateTrigger(
        com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder builderForValue) {
      if (eventUpdateTriggerBuilder_ == null) {
        eventUpdateTrigger_ = builderForValue.build();
        onChanged();
      } else {
        eventUpdateTriggerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    public Builder mergeEventUpdateTrigger(com.google.apps.script.type.calendar.CalendarExtensionPoint value) {
      if (eventUpdateTriggerBuilder_ == null) {
        if (eventUpdateTrigger_ != null) {
          eventUpdateTrigger_ =
            com.google.apps.script.type.calendar.CalendarExtensionPoint.newBuilder(eventUpdateTrigger_).mergeFrom(value).buildPartial();
        } else {
          eventUpdateTrigger_ = value;
        }
        onChanged();
      } else {
        eventUpdateTriggerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    public Builder clearEventUpdateTrigger() {
      if (eventUpdateTriggerBuilder_ == null) {
        eventUpdateTrigger_ = null;
        onChanged();
      } else {
        eventUpdateTrigger_ = null;
        eventUpdateTriggerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    public com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder getEventUpdateTriggerBuilder() {
      
      onChanged();
      return getEventUpdateTriggerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    public com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder getEventUpdateTriggerOrBuilder() {
      if (eventUpdateTriggerBuilder_ != null) {
        return eventUpdateTriggerBuilder_.getMessageOrBuilder();
      } else {
        return eventUpdateTrigger_ == null ?
            com.google.apps.script.type.calendar.CalendarExtensionPoint.getDefaultInstance() : eventUpdateTrigger_;
      }
    }
    /**
     * <pre>
     * An endpoint to trigger when the open event is updated.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.apps.script.type.calendar.CalendarExtensionPoint, com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder, com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder> 
        getEventUpdateTriggerFieldBuilder() {
      if (eventUpdateTriggerBuilder_ == null) {
        eventUpdateTriggerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.apps.script.type.calendar.CalendarExtensionPoint, com.google.apps.script.type.calendar.CalendarExtensionPoint.Builder, com.google.apps.script.type.calendar.CalendarExtensionPointOrBuilder>(
                getEventUpdateTrigger(),
                getParentForChildren(),
                isClean());
        eventUpdateTrigger_ = null;
      }
      return eventUpdateTriggerBuilder_;
    }

    private int currentEventAccess_ = 0;
    /**
     * <pre>
     * Define the level of data access when an event addon is triggered.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
     * @return The enum numeric value on the wire for currentEventAccess.
     */
    @java.lang.Override public int getCurrentEventAccessValue() {
      return currentEventAccess_;
    }
    /**
     * <pre>
     * Define the level of data access when an event addon is triggered.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
     * @param value The enum numeric value on the wire for currentEventAccess to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentEventAccessValue(int value) {
      
      currentEventAccess_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Define the level of data access when an event addon is triggered.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
     * @return The currentEventAccess.
     */
    @java.lang.Override
    public com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess getCurrentEventAccess() {
      @SuppressWarnings("deprecation")
      com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess result = com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.valueOf(currentEventAccess_);
      return result == null ? com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Define the level of data access when an event addon is triggered.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
     * @param value The currentEventAccess to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentEventAccess(com.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      currentEventAccess_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Define the level of data access when an event addon is triggered.
     * </pre>
     *
     * <code>.google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearCurrentEventAccess() {
      
      currentEventAccess_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.apps.script.type.calendar.CalendarAddOnManifest)
  }

  // @@protoc_insertion_point(class_scope:google.apps.script.type.calendar.CalendarAddOnManifest)
  private static final com.google.apps.script.type.calendar.CalendarAddOnManifest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.apps.script.type.calendar.CalendarAddOnManifest();
  }

  public static com.google.apps.script.type.calendar.CalendarAddOnManifest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CalendarAddOnManifest>
      PARSER = new com.google.protobuf.AbstractParser<CalendarAddOnManifest>() {
    @java.lang.Override
    public CalendarAddOnManifest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CalendarAddOnManifest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CalendarAddOnManifest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CalendarAddOnManifest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.apps.script.type.calendar.CalendarAddOnManifest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

